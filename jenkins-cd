pipeline{
    agent any
    parameters{
        choice(name: 'action' , choices: 'create\ndestroy\ndestroyekscluster', description: 'Create/Update or destroy the eks cluster')
        string(name: 'cluster' , defaultValue: 'demo-cluster', description: 'Eks cluster name')
        string(name: 'region' , defaultValue: 'ap-south-1', description: 'Eks cluster region')
    }
    environment{
        ACCESS_KEY = credentials('aws_access_key_id')
        SECRET_KEY = credentials('aws_secret_access_key')

    }

    stages{
        stage('git checkout'){
            steps{
                git branch: 'main', url: 'https://github.com/naren4897/demo-counter-app.git'
            }
        }
        stage('eks connect'){
            steps{
                sh """
                    aws configure set aws_access_key_id "$ACCESS_KEY"
                    aws configure set aws_secret_access_key "$SECRET_KEY"
                    aws configure set region ""
                    aws eks --region ${params.region} update-kubeconfig --name ${params.cluster}
                        """;
            }
        }
        stage('eks deployments'){
            when { expression { params.action == 'create' } }
            steps{
                script{
                    def apply = false
                    try {
                        input message: 'please confirm the apply to initiate the deployments', ok:'apply the config'
                        apply = true
                    }
                     catch (err) {
                        apply = false
                        CurrentBuild.result= 'UNSTABLE'
                    }
                    if(apply){
                        sh """
                            kubectl apply -f .
                                """;
                        
                    }
                }
                
            }
        }
        // stage('Delete deployment'){
        //     when{ expression{params.action == 'destroy'}}
        //     steps{
        //         script{
        //             def destroy = false
        //             try {
        //                 input message: 'please confirm the destroy to delet the deployments', ok:'Ready to destroy the config'
        //                 destroy = true
        //             } catch (err) {
        //                 destroy = false
        //                 CurrentBuild.result= 'UNSTABLE'
        //             }
        //             if(destroy){
        //                 sh """
        //                         kubectl delete -f .
        //                         """;
                        
        //             }
        //         }
                
        //     }
        // }
    }
}